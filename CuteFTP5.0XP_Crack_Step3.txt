CuteFTP破解二_启动注册破解

 

 2008年12月17日

作者:antispy

软件:CuteFTP 5.0 XP

工具:SI,IDA,UE
OS:WinXP

 
CuteFTP启动的时候进行了自校验，和启动注册时一样先关注一下启动线程。
因为其它线程均不在CuteFTP启动时不被启动，重点关注③
beginthread
00403D70          -①启动注册线程
00476590          -②CuteFTP启动时不被启动
004779B0          -③怀疑位置

bpx 004779B0
001B:004779B0  SUB       ESP,08
001B:004779B3  PUSH      ESI
001B:004779B4  PUSH      EDI
001B:004779B5  PUSH      00
001B:004779B7  CALL      004C1ABB
001B:004779BC  PUSH      EAX
001B:004779BD  CALL      004C1DDF
001B:004779C2  ADD       ESP,08
001B:004779C5  PUSH      28
001B:004779C7  CALL      004C1DEC
001B:004779CC  PUSH      EAX
001B:004779CD  CALL      004C4055
001B:004779D2  MOV       ESI,[ESP+1C]
001B:004779D6  MOV       [ESP+10],EAX
001B:004779DA  LEA       EAX,[EDX*4+EDX+32]
001B:004779DE  ADD       ESP,08
001B:004779E1  LEA       EAX,[EAX*4+EAX]
001B:004779E4  SHL       EAX,02
001B:004779E7  TEST      ESI,ESI
001B:004779E9  JNZ       004779F2
001B:004779EB  MOV       EDI,00000045
001B:004779F0  JMP       004779FB
001B:004779F2  MOV       ECX,[ESI]
001B:004779F4  MOV       EDI,[ESI+04]
001B:004779F7  TEST      ECX,ECX
001B:004779F9  JNZ       00477A41
001B:004779FB  CMP       EAX,00000708
001B:00477A00  JBE       00477A07
001B:00477A02  MOV       EAX,000003E8
001B:00477A07  PUSH      EAX
001B:00477A08  CALL      [KERNEL32!Sleep]
001B:00477A0E  TEST      EDI,EDI
001B:00477A10  JZ        00477A2A
001B:00477A12  CALL      [00556008]         ;④怀疑自校验算法位置
001B:00477A18  TEST      EAX,EAX
001B:00477A1A  JNZ       00477A2A
001B:00477A1C  CALL      [00556028]         ;⑤PostMessage(9673h)
001B:00477A22  INC       DWORD PTR [0055E5C0]
001B:00477A28  JMP       00477A64
001B:00477A2A  MOV       EAX,[0055E5C0]
001B:00477A2F  MOV       DWORD PTR [0055E5BC],00000001
001B:00477A39  INC       EAX
001B:00477A3A  MOV       [0055E5C0],EAX
001B:00477A3F  JMP       00477A64
001B:00477A41  PUSH      EAX
001B:00477A42  CALL      [KERNEL32!Sleep]
001B:00477A48  CALL      [00555FF0]         ;⑧
001B:00477A4E  TEST      EAX,EAX
001B:00477A50  JNZ       00477A5A
001B:00477A52  CALL      [00556010]         ;⑨
001B:00477A58  JMP       00477A64
001B:00477A5A  MOV       DWORD PTR [0055E5B0],00000002
001B:00477A64  TEST      ESI,ESI
001B:00477A66  JZ        00477A71
001B:00477A68  PUSH      ESI
001B:00477A69  CALL      004DCE1D
001B:00477A6E  ADD       ESP,04
001B:00477A71  POP       EDI
001B:00477A72  POP       ESI
001B:00477A73  ADD       ESP,08
001B:00477A76  RET
001B:00477A77  NOP

在⑤的00477A1C  CALL      [00556028]当中有下面的代码
001B:004761C0  MOV       EDX,[00556034]
001B:004761C6  OR        DH,20
001B:004761C9  MOV       [00556034],EDX
001B:004761CF  CALL     004DD02F
001B:004761D4  TEST      EAX,EAX
001B:004761D6  JZ       00476211
001B:004761D8  MOV       EDX,[EAX]
001B:004761DA  MOV       ECX,EAX
001B:004761DC  CALL      [EDX+74]
001B:004761DF  TEST      EAX,EAX
001B:004761E1  JZ       00476211
001B:004761E3  CALL     004DD02F
001B:004761E8  TEST      EAX,EAX
001B:004761EA  JZ       004761F5
001B:004761EC  MOV       EDX,[EAX]
001B:004761EE  MOV       ECX,EAX
001B:004761F0  CALL      [EDX+74]
001B:004761F3  JMP      004761F7
001B:004761F5  XOR       EAX,EAX
001B:004761F7  MOV       EAX,[EAX+1C]
001B:004761FA  PUSH      0000983F
001B:004761FF  PUSH      0000192F
001B:00476204  PUSH      00009673
001B:00476209  PUSH      EAX
001B:0047620A  CALL      [USER32!PostMessageA] ;⑥PostMessage(9673h)
001B:00476210  RET
根据一般的经验，客户线程里不会直接调用MessageBox之类的函数，一般是通过
Post一个Message到一个HWND所对应的窗口上，再进行后续的处理。
所以④的位置很有可能就是自校验算法的位置。
001B:00477A12  CALL      [00556008]
修改寄存器的值测试一下结果
:r eax
这里修改eax为00000001h
001B:00477A18  TEST      EAX,EAX
之后就不会运行⑤的代码，直接Ctrl-d，可以发现之前的观点是正确的。
下来我们就研究④里面的问题：F8进入可以看到下面的代码
001B:00477240  PUSH      EBP
001B:00477241  MOV       EBP,ESP
001B:00477243  SUB       ESP,34
001B:00477246  PUSH      EBX
001B:00477247  PUSH      ESI
001B:00477248  PUSH      EDI
001B:00477249  NOP
001B:0047724A  NOP
001B:0047724B  NOP
001B:0047724C  NOP
001B:0047724D  NOP
001B:0047724E  NOP
001B:0047724F  MOV       DWORD PTR [EBP-18],000000B0
001B:00477256  MOV       DWORD PTR [EBP-14],00000000
001B:0047725D  JMP      00477268
001B:0047725F  MOV       EAX,[EBP-14]
...
001B:0047740B  JZ       00477411
001B:0047740D  XOR       EAX,EAX
001B:0047740F  JMP      00477434
001B:00477411  CALL      [EBP-18]
001B:00477414  MOV       [EBP-1C],EAX
001B:00477417  CMP       DWORD PTR [EBP-1C],00
001B:0047741B  JZ       00477431
001B:0047741D  MOVSX     EDX,BYTE PTR [EBP-09]
001B:00477421  XOR       EDX,[EBP-1C]
001B:00477424  MOV       [EBP-0B],DL
001B:00477427  MOVSX     EAX,BYTE PTR [EBP-07]
001B:0047742B  XOR       EAX,[EBP-1C]
001B:0047742E  MOV       [EBP-09],AL
001B:00477431  MOV       EAX,[EBP-1C]       ;⑦最后EAX被修改
001B:00477434  POP       EDI
001B:00477435  POP       ESI
001B:00477436  POP       EBX
001B:00477437  MOV       ESP,EBP
001B:00477439  POP       EBP
001B:0047743A  RET
001B:0047743B  INT       3
不用关心中间的算法，只需注意最后EAX寄存器被修改的地方⑦,
用相同的方法把
MOV       EAX,[EBP-1C]
修改为
MOV       EAX,01h

自校验破解初步完成
当点击‘连接’按钮时还是会弹出自校验失败对话框，
跟踪代码发现⑧的位置同样是自校验的算法的代码，
需要修改⑧里面的00476462h的
00476462                 mov     eax, [ebp+var_14]
修改为
00476462                 or      ah, 01
注意后面的⑨
00477A52  CALL      [00556010]         ;⑨
里面有
mov     dword_55E5B0, 1
这个阀值是控制是否弹出Message的。
也就是说CuteFTP用了不同的方法（PostMessage和全局变量等）来防止被Crack。
到这里CuteFTP可以正常启动了，但是在上传或者下载文件的时候还是会弹出
自校验失败的错误，说明CuteFTP在不同的地方使用了自校验功能。

下面解决这个问题，

根据设想设定断点，
